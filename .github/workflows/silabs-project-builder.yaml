# The entire pipeline was shamelessy borrowed from https://github.com/NabuCasa/silabs-firmware-builder
# Kudos to Stefan and NabuCasa

name: SLC Project Builder

on:
  workflow_call:
    inputs:
      image_name:
        required: false
        type: string
        default: "ghcr.io/${{ github.repository_owner }}/silabs-project-builder:${{ inputs.sdk_version }}"

      export_project_name:
        required: false
        type: string
        default: ''

      project_name:
        required: true
        type: string
      
      src_project_path:
        description: "Source path of the project. defaults to $GITHUB_WORKSPACE"
        required: false
        type: string

      components:
        required: false
        type: string

      configuration:
        required: false
        type: string

      sdkpatchpath:
        required: false
        type: string

      extra_c_defs:
        required: false
        type: string

      sdk_version:
        required: true
        type: string

      device:
        required: true
        type: string

      metadata_extra:
        required: false
        default: "null"
        type: string

      ota_string:
        required: false
        description: OTA string to add into ota file header
        default: ''
        type: string

      sdk_extensions:
        required: false
        description: 'List of SDK extensions git URLs. an URL with #tag_name will use a specific tag/branch name'
        default: ''
        type: string

    outputs:
      project_name:
        description: Name of the generated SLC project
        value: ${{ jobs.firmware-build.outputs.project_name }}

      artifact_name:
        description: Artifact name for the uploaded firmware
        value: ${{ jobs.firmware-build.outputs.artifact_name }}

      ota_version:
        description: OTA version
        value: ${{ jobs.firmware-build.outputs.ota_version }}


env:
  PROJECT_NAME: ${{ inputs.export_project_name == '' && inputs.project_name || inputs.export_project_name }}
  IS_NEW_PROJECT: ${{ inputs.export_project_name != '' && 'yes' || 'no' }}
  IS_BTL: ${{ startsWith(inputs.project_name, 'bootloader') && 'yes' || '' }}
  branch_to_ota: >-
    ${{ github.ref_name == 'main' 
        && '0'
        || (startsWith(github.ref_name, 'rc')
            && '5'
            || ( github.ref_name == 'dev'
                 && '9'
                 || '8')
        )
    }}
  branch_to_build_type: >-
    ${{ github.ref_name == 'main' 
        && 'rel'
        || (startsWith(github.ref_name, 'rc')
            && 'rc'
            || ( github.ref_name == 'dev'
                 && 'dev'
                 || 'unk')
        )
    }}
  sdk_path: /gecko_sdk

jobs:
  firmware-build:
    name: Build '${{ inputs.PROJECT_NAME }}' Project
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image_name }}
      options: --user root
    defaults:
      run:
        shell: su --shell=/bin/bash builder {0}
    outputs:
      project_name: ${{ env.PROJECT_NAME }}
      artifact_name: ${{ env.PROJECT_NAME }}
      ota_version: ${{ steps.ota_version.outputs.ota_version }}

    steps:
      - uses: actions/checkout@v3.3.0
      - name: Adjust permission
        shell: bash
        run: chown -R builder .

      - name: Install the SDK Extenstions
        if: ${{ inputs.sdk_extensions != '' }}
        shell: bash
        run: |
          mkdir -p ${{ env.sdk_path }}/extension || true
          cd ${{ env.sdk_path }}/extension
          for EXT in ${{ inputs.sdk_extensions }}
          do
            if [[ "$EXT" == *#* ]]
            then
              URL="${EXT%%#*}"
              TAG="${EXT#*#}"
              echo "Clonining ${URL} with '${TAG}' tag"
              git clone --depth 1 -b "${TAG}" "$URL"
            else
              EXT=$(echo $EXT | cut -d'#' -f1)
              echo "Clonining ${EXT}"
              git clone --depth 1 "$EXT"
            fi
          done

      - name: Trust SDK Extenstions
        if: ${{ inputs.sdk_extensions != '' }}
        run: |
          for EXT_PATH in ${{ env.sdk_path }}/extension/*
          do
            echo "Trusting ${EXT_PATH}"
            slc signature trust -extpath "$EXT_PATH"
          done

      - name: Generate OTA Version
        id: ota_version
        shell: bash
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          LC_TIME=C META_DATE=$(git log -1 --format="%cd" --date=format:"%Y%m%d")
          LC_TIME=C OTA_DATE=$(git log -1 --format="%cd" --date=format:"%y%m%d")
          BUILD_ID_MOD100=$(printf '%02d' $(expr $GITHUB_RUN_NUMBER % 100))  # 100 builds per day only
          OTA_VERSION="${OTA_DATE}${{ env.branch_to_ota }}${BUILD_ID_MOD100}"
          echo "OTA version: '${OTA_VERSION}'"
          echo "OTA_VERSION=${OTA_VERSION}" >> "$GITHUB_OUTPUT"
          echo "BUILD_DATE=${META_DATE}" >> "$GITHUB_OUTPUT"
          echo "BUILD_ID_MOD100=${BUILD_ID_MOD100}" >> "$GITHUB_OUTPUT"

      - name: Update dateCode in ZAP config
        if: ${{ env.IS_BTL != 'yes' }}
        run: |
          cd "${{ env.PROJECT_NAME }}/config/zcl"
          cp "zcl_config.zap" "zcl_config.zap~"
          FILTER='(. | .endpointTypes[].clusters[] | select(.name == "Basic") | .attributes[] | select(.code == 6)).defaultValue'
          DATE_CODE="${{ steps.ota_version.outputs.BUILD_DATE}}.${{ env.branch_to_build_type }}.${{ steps.ota_version.outputs.BUILD_ID_MOD100 }}"
          echo "Date Code = '${DATE_CODE}'"
          jq "${FILTER} |= \"${DATE_CODE}\"" "zcl_config.zap~" > "zcl_config.zap"

      - name: Update SWBuildId in ZAP config
        if: ${{ env.IS_BTL != 'yes' }}
        run: |
          cd "${{ env.PROJECT_NAME }}/config/zcl"
          cp "zcl_config.zap" "zcl_config.zap~"
          FILTER='(. | .endpointTypes[].clusters[] | select(.name == "Basic") | .attributes[] | select(.code == 16384)).defaultValue'
          SW_BUILD_ID="SHA1: $(echo ${{ github.sha }} | cut -c1-10)"
          echo "Date Code = '${SW_BUILD_ID}'"
          jq "${FILTER} |= \"${SW_BUILD_ID}\"" "zcl_config.zap~" > "zcl_config.zap"

      - name: Generate New Project
        if: env.IS_NEW_PROJECT == 'yes'
        run: |
          slc generate \
              --with="${{ inputs.device }},${{ inputs.components }}" \
              --project-file="${{ inputs.src_project_path }}/${{ inputs.project_name }}/${{ inputs.project_name }}.slcp" \
              --export-destination="$(pwd)/${{ inputs.export_project_name }}" \
              --project-name="${{ inputs.export_project_name }}" \
              --new-project \
              --force \
              --copy-proj-sources --copy-sdk-sources \
              --configuration="${{ inputs.configuration }}"

      - name: Generate Existing Project
        if: env.IS_NEW_PROJECT != 'yes'
        run: |
          slc generate \
              --with="${{ inputs.device }},${{ inputs.components }}" \
              --project-file="$(pwd)/${{ inputs.project_name }}/${{ inputs.project_name }}.slcp" \
              --force \
              --copy-sdk-sources \
              --configuration="${{ inputs.configuration }}"

      - name: Patch SDK
        if: "${{ inputs.sdkpatchpath != '' }}"
        run: |
          cd ${{ env.PROJECT_NAME }}/gecko_sdk_${{ inputs.sdk_version }}
          for patch in "../../${{ inputs.sdkpatchpath }}"/*.patch
          do
              echo "Applying ${patch}"
              patch -p1 < $patch
          done

      - name: Update OTA version
        if: ${{ env.IS_BTL != 'yes' }}
        run: |
          cd ${{ env.PROJECT_NAME }}/config
          sed -i -E \
              's/^(#define\s+EMBER_AF_PLUGIN_OTA_CLIENT_POLICY_FIRMWARE_VERSION)\s+[0-9]+\s*$/\1 ${{ steps.ota_version.outputs.ota_version }}/' \
              ota-client-policy-config.h 

      - name: Build Firmware
        run: |
          cd ${{ env.PROJECT_NAME }}
          make -f ${{ env.PROJECT_NAME }}.Makefile release

      - name: Get Bootloader version
        if: ${{ env.IS_BTL == 'yes' }}
        shell: bash
        run: |
          cd ${{ env.PROJECT_NAME }}
          BTL_VERSION=$(awk \
              '/#define BOOTLOADER_VERSION_MAIN_CUSTOMER/ \
              {print $NF; exit}' \
              config/btl_core_cfg.h)
          echo "Bootloader Customer Version: $BTL_VERSION"
          echo "BOOTLOADER_VERSION=$BTL_VERSION" >> "$GITHUB_ENV"

      - name: Get OTA image type and manufacturer id
        if: ${{ env.IS_BTL != 'yes' }}
        shell: bash
        run: |
          cd ${{ env.PROJECT_NAME }}
          OTA_IMAGE_TYPE_ID=$(awk \
              '/#define EMBER_AF_PLUGIN_OTA_CLIENT_POLICY_IMAGE_TYPE_ID/ \
              {print $NF; exit}' \
              config/ota-client-policy-config.h)
          OTA_MANUFACTURER_ID=$(awk \
              '/#define EMBER_AF_MANUFACTURER_CODE/ \
              {print $NF; exit}' \
              autogen/zap-config.h)
          echo "OTA Manufacturer ID: $OTA_MANUFACTURER_ID"
          echo "OTA Image Type ID: $OTA_IMAGE_TYPE_ID"
          echo "OTA_IMAGE_TYPE_ID=$OTA_IMAGE_TYPE_ID" >> "$GITHUB_ENV"
          echo "OTA_MANUFACTURER_ID=$OTA_MANUFACTURER_ID" >> "$GITHUB_ENV"

      - name: Add Firmware Metadata
        run: |
          cd ${{ env.PROJECT_NAME }}
          jq --null-input \
             '{
                "metadata_version": 1,
                "sdk_version":       "${{ inputs.sdk_version }}",
                ${{ env.IS_BTL != 'yes'
                    && format('"ota_version":       "{0}",
                               "ota_image_type_id": "{1}",
                               "manufacturer_id":   "{2}",',
                               steps.ota_version.outputs.ota_version,
                               env.OTA_IMAGE_TYPE_ID,
                               env.OTA_MANUFACTURER_ID)
                    || format('"bootloader_version": "{0}",',
                              env.BOOTLOADER_VERSION)
                }}
                "workflow_run":      "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id}}",
                "commit":            "${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}",
                "branch":            "${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }}",
                "commit_sha":        "${{ github.sha }}"
              } + ${{ inputs.metadata_extra }}' > ${{
                    env.IS_BTL != 'yes'
                    && 'build/release/version.json'
                    || 'artifact/version.json'
                  }}

      - name: Generate gbl Firmware
        if: ${{ env.IS_BTL != 'yes' }}
        run: |
          cd ${{ env.PROJECT_NAME }}
          commander gbl create build/release/${{ env.PROJECT_NAME }}.gbl \
                    --app build/release/${{ env.PROJECT_NAME }}.hex \
                    --compress lzma \
                    --device ${{ inputs.device }} --metadata build/release/version.json

      - name: Generate OTA Image
        if: ${{ env.IS_BTL != 'yes' }}
        run: |
          cd ${{ env.PROJECT_NAME }}/build/release
          /gecko_sdk/protocol/zigbee/tool/image-builder/image-builder-linux \
              --create "${{ env.PROJECT_NAME }}-${{ steps.ota_version.outputs.ota_version }}.ota" \
              --version ${{ steps.ota_version.outputs.ota_version }} \
              ${{ inputs.ota_string != ''
                  && format('--string "{0}" \', inputs.ota_string)
                  || '\' 
              }}
              --image-type ${{ env.OTA_IMAGE_TYPE_ID }} \
              --manuf-id ${{ env.OTA_MANUFACTURER_ID }} \
              --tag-id 0x0000 \
              --tag-file "${{ env.PROJECT_NAME}}.gbl"

      - uses: actions/upload-artifact@v3
        if: (success() || failure()) && env.IS_BTL != 'yes'
        name: Upload application firmware
        with:
          name: ${{ env.PROJECT_NAME }}
          path: |
            ${{ env.PROJECT_NAME }}/build/release/version.json
            ${{ env.PROJECT_NAME }}/build/release/*.gbl
            ${{ env.PROJECT_NAME }}/build/release/*.hex
            ${{ env.PROJECT_NAME }}/build/release/*.ota

      - uses: actions/upload-artifact@v3
        if: (success() || failure()) && env.IS_BTL == 'yes'
        name: Upload bootloader firmware
        with:
          name: ${{ env.PROJECT_NAME }}
          path: |
            ${{ env.PROJECT_NAME }}/artifact/version.json
            ${{ env.PROJECT_NAME }}/artifact/*.s37

      - uses: actions/upload-artifact@v3
        if: (success() || failure()) && vars.ARTIFACT_UPLOAD_SOURCES != ''
        name: Upload generated project sources
        with:
          name: ${{ env.PROJECT_NAME }}-Sources
          path: |
            ${{ env.PROJECT_NAME }}
            !${{ env.PROJECT_NAME }}/build/**